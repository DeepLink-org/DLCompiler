diff --git a/include/triton/Dialect/Triton/IR/TritonOps.td b/include/triton/Dialect/Triton/IR/TritonOps.td
index e9f892da0..b8860a875 100644
--- a/include/triton/Dialect/Triton/IR/TritonOps.td
+++ b/include/triton/Dialect/Triton/IR/TritonOps.td
@@ -1411,4 +1411,22 @@ def TT_DescriptorScatterOp : TT_Op<"descriptor_scatter", [TT_DescriptorStoreLike
 }
 
 
+def TT_AnnotationOp : TT_Op<"annotation", [Pure, MemoryEffects<[MemWrite]>]> {
+  let summary = "Annotate a tensor with key-value attribute pairs";
+  let description = [{
+    `tt.annotation` operation can be used to annotate a tensor with
+    key-value attribute pairs.
+
+    Example:
+    ```mlir
+    tt.annotation %target {key : val}
+    ```
+  }];
+  let arguments = (ins TT_Tensor:$src);
+  let assemblyFormat = [{
+    $src attr-dict `:` type($src)
+  }];
+}
+
+
 #endif // Triton_OPS
diff --git a/python/triton/backends/__init__.py b/python/triton/backends/__init__.py
index 69a8dab0a..953582f32 100644
--- a/python/triton/backends/__init__.py
+++ b/python/triton/backends/__init__.py
@@ -6,6 +6,7 @@ from typing import Type, TypeVar, Union
 from types import ModuleType
 from .driver import DriverBase
 from .compiler import BaseBackend
+import os
 
 if sys.version_info >= (3, 10):
     from importlib.metadata import entry_points
@@ -34,14 +35,37 @@ class Backend:
     driver: Type[DriverBase]
 
 
-def _discover_backends() -> dict[str, Backend]:
+# def _discover_backends() -> dict[str, Backend]:
+#     backends = dict()
+#     for ep in entry_points().select(group="triton.backends"):
+#         print(f"zmz debug ep: {ep}, name: {ep.name}, value: {ep.value}")
+#         compiler = importlib.import_module(f"{ep.value}.compiler")
+#         driver = importlib.import_module(f"{ep.value}.driver")
+#         backends[ep.name] = Backend(_find_concrete_subclasses(compiler, BaseBackend),  # type: ignore
+#                                     _find_concrete_subclasses(driver, DriverBase))  # type: ignore
+#     return backends
+
+
+def _load_module(name, path):
+    spec = importlib.util.spec_from_file_location(name, path)
+    module = importlib.util.module_from_spec(spec)
+    spec.loader.exec_module(module)
+    return module
+
+def _discover_backends():
     backends = dict()
-    for ep in entry_points().select(group="triton.backends"):
-        compiler = importlib.import_module(f"{ep.value}.compiler")
-        driver = importlib.import_module(f"{ep.value}.driver")
-        backends[ep.name] = Backend(_find_concrete_subclasses(compiler, BaseBackend),  # type: ignore
-                                    _find_concrete_subclasses(driver, DriverBase))  # type: ignore
+    root = os.path.dirname(__file__)
+    for name in os.listdir(root):
+        if not os.path.isdir(os.path.join(root, name)):
+            continue
+        if name.startswith('__'):
+            continue
+        compiler = _load_module(name, os.path.join(root, name, 'compiler.py'))
+        driver = _load_module(name, os.path.join(root, name, 'driver.py'))
+        backends[name] = Backend(_find_concrete_subclasses(compiler, BaseBackend),
+                                 _find_concrete_subclasses(driver, DriverBase))
     return backends
 
 
 backends: dict[str, Backend] = _discover_backends()
+print(f"zmz debug backends: {backends}")
diff --git a/python/triton/compiler/compiler.py b/python/triton/compiler/compiler.py
index 81d7b3267..df0b57f4d 100644
--- a/python/triton/compiler/compiler.py
+++ b/python/triton/compiler/compiler.py
@@ -15,6 +15,33 @@ import re
 import functools
 import os
 import time
+from dataclasses import dataclass
+
+
+
+@dataclass
+class AttrsDescriptor:
+    divisible_by_16: set = None
+    equal_to_1: set = None
+
+    def __post_init__(self):
+        if self.divisible_by_16 is None:
+            self.divisible_by_16 = set()
+        if self.equal_to_1 is None:
+            self.equal_to_1 = set()
+
+    def to_dict(self):
+        return {'divisible_by_16': list(self.divisible_by_16), 'equal_to_1': list(self.equal_to_1)}
+
+    @staticmethod
+    def from_dict(data):
+        return AttrsDescriptor(divisible_by_16=set(data.get('divisible_by_16', [])),
+                               equal_to_1=set(data.get('equal_to_1', [])))
+
+    def hash(self):
+        key = str([sorted(x) for x in self.__dict__.values()])
+        return hashlib.sha256(key.encode("utf-8")).hexdigest()
+
 
 # - ^\s*tt\.func\s+ : match the start of the string, any leading whitespace, the keyword func,
 #    and any following whitespace
@@ -463,8 +490,12 @@ class CompiledKernel:
         if knobs.runtime.kernel_load_start_hook is not None:
             knobs.runtime.kernel_load_start_hook(self.module, self.function, self.name, self.metadata_group, self.hash)
         # TODO: n_regs, n_spills should be metadata generated when calling `ptxas`
-        self.module, self.function, self.n_regs, self.n_spills, self.n_max_threads = driver.active.utils.load_binary(
+        self.module, self.function, self.n_regs, self.n_spills = driver.active.utils.load_binary(
             self.name, self.kernel, self.metadata.shared, device)
+        import sys
+        self.n_max_threads = sys.maxsize
+        # self.module, self.function, self.n_regs, self.n_spills, self.n_max_threads = driver.active.utils.load_binary(
+        #     self.name, self.kernel, self.metadata.shared, device)
         warp_size = driver.active.get_current_target().warp_size
         if self.metadata.num_warps * warp_size > self.n_max_threads:
             raise_(OutOfResources(self.metadata.num_warps * warp_size, self.n_max_threads, "threads"))
diff --git a/setup.py b/setup.py
index dffc45ab1..25e9d77eb 100644
--- a/setup.py
+++ b/setup.py
@@ -182,6 +182,7 @@ class Package:
 # json
 def get_json_package_info():
     url = "https://github.com/nlohmann/json/releases/download/v3.11.3/include.zip"
+    url = "file:///mnt/data01/zmz/workspace/04ttshared/for_latest_ttshared/include.zip"
     return Package("json", "", url, "JSON_INCLUDE_DIR", "", "JSON_SYSPATH")
 
 
@@ -244,6 +245,10 @@ def get_llvm_package_info():
     # Create a stable symlink that doesn't include revision
     sym_name = f"llvm-{system_suffix}"
     url = f"https://oaitriton.blob.core.windows.net/public/llvm-builds/{name}.tar.gz"
+    url = f"file:///mnt/data01/zmz/workspace/04ttshared/for_latest_ttshared/llvm-064f02da-ubuntu-arm64.tar.gz"  # 修正斜杠数量
+    print(f"zmz debug url: {url}")
+    # import pdb
+    # pdb.set_trace()
     return Package("llvm", name, url, "LLVM_INCLUDE_DIRS", "LLVM_LIBRARY_DIR", "LLVM_SYSPATH", sym_name=sym_name)
 
 
@@ -463,6 +468,18 @@ class CMakeBuild(build_ext):
             "-DTRITON_PLUGIN_DIRS=" + ';'.join([b.src_dir for b in backends if b.is_external]),
             "-DTRITON_WHEEL_DIR=" + wheeldir
         ]
+        
+        # # --- 新增代码：确保编译指定插件的 tools 目录 ---
+        # # 获取所有外部插件的 tools 目录
+        # plugin_tools_dirs = [b.tools_dir for b in backends if b.is_external and b.tools_dir is not None]
+        # # 将 tools 目录也作为插件目录传递给 CMake
+        # if plugin_tools_dirs:
+        #     # 合并原有的插件目录和 tools 目录
+        #     all_plugin_dirs = [b.src_dir for b in backends if b.is_external] + plugin_tools_dirs
+        #     cmake_args.append("-DTRITON_PLUGIN_DIRS=" + ';'.join(all_plugin_dirs))
+        # print(f"zmz debug cmake_args: {cmake_args}")
+        # # --- 新增代码结束 ---
+
         if lit_dir is not None:
             cmake_args.append("-DLLVM_EXTERNAL_LIT=" + lit_dir)
         cmake_args.extend(thirdparty_cmake_args)
@@ -626,7 +643,9 @@ def get_package_dirs():
             # Install the contents of each backend's `tools` directory into
             # `triton.tools.extra`.
             for x in os.listdir(backend.tools_dir):
-                yield (f"triton.tools.extra.{x}", os.path.join(backend.tools_dir, x))
+                # 还要跳过dicp_triton_opt
+                if os.path.isdir(os.path.join(backend.tools_dir, x)) and "dicp_triton_opt" not in x:
+                    yield (f"triton.tools.extra.{x}", os.path.join(backend.tools_dir, x))
 
     if check_env_flag("TRITON_BUILD_PROTON", "ON"):  # Default ON
         yield ("triton.profiler", "third_party/proton/proton")
@@ -649,7 +668,8 @@ def get_packages():
             # Install the contents of each backend's `tools` directory into
             # `triton.tools.extra`.
             for x in os.listdir(backend.tools_dir):
-                yield f"triton.tools.extra.{x}"
+                if os.path.isdir(os.path.join(backend.tools_dir, x)) and "dicp_triton_opt" not in x:
+                    yield f"triton.tools.extra.{x}"
 
     if check_env_flag("TRITON_BUILD_PROTON", "ON"):  # Default ON
         yield "triton.profiler"
@@ -678,8 +698,9 @@ def add_link_to_backends(external_only):
             extra_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "python", "triton", "tools", "extra"))
             for x in os.listdir(backend.tools_dir):
                 src_dir = os.path.join(backend.tools_dir, x)
-                install_dir = os.path.join(extra_dir, x)
-                update_symlink(install_dir, src_dir)
+                if os.path.isdir(src_dir) and "dicp_triton_opt" not in x:
+                    install_dir = os.path.join(extra_dir, x)
+                    update_symlink(install_dir, src_dir)
 
 
 def add_link_to_proton():
diff --git a/unittest/googletest.cmake b/unittest/googletest.cmake
index 064dc8860..4a2f6307b 100644
--- a/unittest/googletest.cmake
+++ b/unittest/googletest.cmake
@@ -1,6 +1,13 @@
 include(FetchContent)
 
-set(GOOGLETEST_DIR "" CACHE STRING "Location of local GoogleTest repo to build against")
+if(DEFINED ENV{GOOGLETEST_DIR})
+    set(GOOGLETEST_DIR $ENV{GOOGLETEST_DIR})
+else()
+    set(GOOGLETEST_DIR "")
+endif()
+
+# set(GOOGLETEST_DIR "" CACHE STRING "Location of local GoogleTest repo to build against")
+message(STATUS "GOOGLETEST_DIR: ${GOOGLETEST_DIR}")
 
 if(GOOGLETEST_DIR)
   set(FETCHCONTENT_SOURCE_DIR_GOOGLETEST ${GOOGLETEST_DIR} CACHE STRING "GoogleTest source directory override")
@@ -8,7 +15,8 @@ endif()
 
 FetchContent_Declare(
   googletest
-  GIT_REPOSITORY https://github.com/google/googletest.git
+  # GIT_REPOSITORY https://github.com/google/googletest.git
+  GIT_REPOSITORY git@github.com:google/googletest.git
   GIT_TAG v1.17.0
   )
 
